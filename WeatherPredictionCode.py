# -*- coding: utf-8 -*-
"""ProjectML 7.1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EUiD12a2ZXF5gDaqeZJMPh7KuARfuVn3
"""

import numpy as np
import pandas as pd
weather = pd.read_csv("weather2016-2020.csv", index_col="dt_iso")
weather

weather.isna().sum()

weather = weather.drop(columns=['dt','timezone','city_name', 'lat', 'lon','sea_level', 'grnd_level', 'rain_today', 'snow_1h', 'snow_3h', 'snow_6h', 'snow_12h','snow_24h', 'snow_today','weather_id', 'weather_icon'])

weather.isna().sum()

weather["rain_1h"] = weather["rain_1h"].fillna(0)
weather["rain_3h"] = weather["rain_3h"].fillna(0)
weather["rain_6h"] = weather["rain_6h"].fillna(0)
weather["rain_12h"] = weather["rain_12h"].fillna(0)
weather["rain_24h"] = weather["rain_24h"].fillna(0)

weather.isna().sum()

weather.dtypes

weather.groupby('weather_main').size()

weather = weather[weather['weather_main'] != 'Ash']
weather = weather[weather['weather_main'] != 'Drizzle']
weather = weather[weather['weather_main'] != 'Haze']
weather = weather[weather['weather_main'] != 'Mist']
weather = weather[weather['weather_main'] != 'Smoke']

weather.groupby('weather_main').size()

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
weather['weather_main'] = label_encoder.fit_transform(weather['weather_main'])
weather['weather_description'] = label_encoder.fit_transform(weather['weather_description'])
weather

weather["target"] = weather.shift(-1)["weather_main"]
weather

weather = weather.iloc[:-1,:].copy()
weather

X = weather.drop(columns=['target'])
y = weather['target']

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X)
X = scaler.transform(X)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

weather.groupby('target').size()

from imblearn.under_sampling import ClusterCentroids
cc = ClusterCentroids(random_state=42)
x_sm, y_sm = cc.fit_resample(X_train, y_train)

from imblearn.under_sampling import ClusterCentroids
cc = ClusterCentroids(random_state=42)
x_smtest, y_smtest = cc.fit_resample(X_test, y_test)

weather_train = pd.DataFrame(y_sm)
weather_train.groupby('target').size()

from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
clf = DecisionTreeClassifier()
param_grid = {
    'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90],

}
clf_gs = GridSearchCV(estimator=clf, param_grid=param_grid, cv=5)
clf_gs.fit(x_sm, y_sm)

print("Best hyperparameters found:")
print(clf_gs.best_params_)

best_clf = clf_gs.best_estimator_
y_pred = best_clf.predict(x_smtest)
accuracy = accuracy_score(y_smtest, y_pred)
print("Accuracy:", accuracy)

from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
print(classification_report(y_smtest, y_pred))

from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split, GridSearchCV
param_grid = {
    'kernel': ['rbf', 'poly', 'sigmoid']
}

svc = SVC(random_state=42)
svc_gs = GridSearchCV(estimator=svc, param_grid=param_grid, cv=5, n_jobs=-1)
svc_gs.fit(x_sm, y_sm)

from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
best_svc = svc_gs.best_estimator_
y_pred = best_svc.predict(x_smtest)
accuracy = accuracy_score(y_smtest, y_pred)
print("Accuracy:", accuracy)
print(classification_report(y_smtest, y_pred))

from sklearn.ensemble import GradientBoostingClassifier
param_grid = {
    'learning_rate': [0.01, 0.1, 0.2]
}
gbm = GradientBoostingClassifier(random_state=42)
gbm_gs = GridSearchCV(estimator=gbm, param_grid=param_grid, cv=5, n_jobs=-1)
gbm_gs.fit(x_sm, y_sm)

svc_best = svc_gs.best_estimator_
gbm_best = gbm_gs.best_estimator_

print('Decision Tree:{}'.format(best_clf.score(x_smtest,y_smtest)))
print('SVC:{}'.format(svc_best.score(x_smtest,y_smtest)))
print('GBM:{}'.format(gbm_best.score(x_smtest,y_smtest)))

from sklearn.ensemble import VotingClassifier
estimators=[('Decision Tree', best_clf),('SVC', svc_best),('GBM',gbm_best)]
ensemble = VotingClassifier(estimators, voting='hard')

ensemble.fit(x_sm,y_sm)
y_pred = ensemble.predict(x_smtest)
accuracy = accuracy_score(y_smtest, y_pred)
print(f'Accuracy: {accuracy}')
print(classification_report(y_smtest, y_pred))

pip install streamlit

import pickle as pkl
import streamlit as st
import joblib
filename = 'Ensemble.sav'
pkl.dump(ensemble, open(filename,'wb'))

print(pd.__version__)

print(np.__version__)

print(st.__version__)

print(joblib.__version__)

weather.groupby('weather_description').size()